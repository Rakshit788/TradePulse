generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  username       String?         @unique
  balance        Float           @default(100000)
  cashBalance    Float           @default(100000)  // Added: Separate cash balance for trading
  influenceScore Float           @default(0)

  portfolio      PortfolioItem[]
  limitOrders    LimitOrder[]
  boughtTrades   Trade[]         @relation("buyer")
  soldTrades     Trade[]         @relation("seller")
  sessions       Session[]
  accounts       Account[]
  createdAt      DateTime        @default(now())
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PortfolioItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  qty         Float
  avgBuyPrice Float

  userId String @db.ObjectId
  assetId String @db.ObjectId

  user  User  @relation(fields: [userId], references: [id])
  asset Asset @relation(fields: [assetId], references: [id])

  // Added: Composite unique constraint for upsert operations
  @@unique([userId, assetId], name: "userId_assetId")
}

model Trade {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  qty        Float
  price      Float
  executedAt DateTime @default(now())

  buyerId String @db.ObjectId
  sellerId String @db.ObjectId
  assetId String @db.ObjectId

  buyer User @relation("buyer", fields: [buyerId], references: [id])
  seller User @relation("seller", fields: [sellerId], references: [id])
  asset Asset @relation(fields: [assetId], references: [id])

  // Added: Index for better query performance
  @@index([assetId, executedAt])
}

model LimitOrder {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  qty        Float
  price      Float
  side       String   // "buy" or "sell"
  status     String   @default("open") // "open", "executed", "cancelled"
  createdAt  DateTime @default(now())
  executedAt DateTime?

  userId  String @db.ObjectId
  assetId String @db.ObjectId

  user  User  @relation(fields: [userId], references: [id])
  asset Asset @relation(fields: [assetId], references: [id])

  // Added: Composite indexes for matching engine performance
  @@index([status, side, assetId, price, createdAt], name: "matching_index")
  @@index([assetId, status, qty])
}

model Kline {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  interval  String
  open      Float
  close     Float
  high      Float
  low       Float
  volume    Float
  startTime DateTime
  endTime   DateTime

  assetId String @db.ObjectId
  asset   Asset  @relation(fields: [assetId], references: [id])
}

model Asset {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  symbol       String         @unique
  description  String?
  initialPrice Float?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  orders    LimitOrder[]
  trades    Trade[]
  klines    Kline[]
  portfolio PortfolioItem[]
}


model MatchingLock {
  id         String   @id @map("_id")  
  acquiredAt DateTime @default(now())
  expiresAt  DateTime
}

// Added: System configuration for matching engine settings
model SystemConfig {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  key        String   @unique
  value      String
  updatedAt  DateTime @updatedAt @default(now())
}

// Added: Audit log for tracking all matching engine operations
model MatchingAuditLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  operation   String   // "match_start", "match_complete", "trade_created", etc.
  assetId     String?  @db.ObjectId
  orderId     String?  @db.ObjectId
  tradeId     String?  @db.ObjectId
  details     Json?    // Store additional context as JSON
  executedAt  DateTime @default(now())

  @@index([operation, executedAt])
}